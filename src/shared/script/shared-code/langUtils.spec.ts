import { langUtils } from './langUtils'
import { plNumber, plString } from 'pocket-lisp-stdlib'
import { pls, pln, plf } from './utils'

describe('lang utils', () => {
  test('abbreviate', () => {
    const fn = langUtils['abbreviate']
    expect(fn(pls('NONE'), pls('valami'))).toEqual(pls('valami'))
    expect(fn(pls('HU'), pls('missing'))).toEqual(pls('missing'))
    expect(fn(pls('HU'), pls('centiliter'))).toEqual(pls('cl'))
    expect(fn(pls('HU'), pls('kilogram'))).toEqual(pls('kg'))
    expect(fn(pls('HU'), pls('másodperc'))).toEqual(pls('mp'))
    expect(fn(pls('HU'), pls('óra'))).toEqual(pls('ó'))
  })

  test('translate', () => {
    const fn = langUtils['translate']
    expect(fn(pls('NONE'), pls('valami'))).toEqual(pls('valami'))
    expect(fn(pls('HU'), pls('missing'))).toEqual(pls('missing'))
    expect(fn(pls('HU'), pls('óra'))).toEqual(pls('h'))
    expect(fn(pls('HU'), pls('másodperc'))).toEqual(pls('s'))
    expect(fn(pls('HU'), pls('hüvelyk'))).toEqual(pls('in'))
  })

  test('suffix-times', () => {
    const fn = langUtils['suffix-times']
    expect(fn(plNumber(-5))).toEqual(plString('ször'))
    expect(fn(plNumber(-1))).toEqual(plString('szer'))
    expect(fn(plNumber(0))).toEqual(plString('szor'))
    expect(fn(plNumber(1))).toEqual(plString('szer'))
    expect(fn(plNumber(2))).toEqual(plString('szer'))
    expect(fn(plNumber(3))).toEqual(plString('szor'))
    expect(fn(plNumber(4))).toEqual(plString('szer'))
    expect(fn(plNumber(5))).toEqual(plString('ször'))
    expect(fn(plNumber(6))).toEqual(plString('szor'))
    expect(fn(plNumber(7))).toEqual(plString('szer'))
    expect(fn(plNumber(8))).toEqual(plString('szor'))
    expect(fn(plNumber(9))).toEqual(plString('szer'))
    expect(fn(plNumber(10))).toEqual(plString('szer'))
    expect(fn(plNumber(15))).toEqual(plString('ször'))
    expect(fn(plNumber(20))).toEqual(plString('szor'))
    expect(fn(plNumber(30))).toEqual(plString('szor'))
    expect(fn(plNumber(40))).toEqual(plString('szer'))
    expect(fn(plNumber(50))).toEqual(plString('szer'))
    expect(fn(plNumber(60))).toEqual(plString('szor'))
    expect(fn(plNumber(70))).toEqual(plString('szer'))
    expect(fn(plNumber(80))).toEqual(plString('szor'))
    expect(fn(plNumber(90))).toEqual(plString('szer'))
    expect(fn(plNumber(100))).toEqual(plString('szor'))
    expect(fn(plNumber(1000))).toEqual(plString('szer'))
  })

  test('article', () => {
    const fn = langUtils['article']
    expect(fn(pln(-5))).toEqual(pls('a'))
    expect(fn(pln(0))).toEqual(pls('a'))
    expect(fn(pln(1))).toEqual(pls('az'))
    expect(fn(pln(2))).toEqual(pls('a'))
    expect(fn(pln(3))).toEqual(pls('a'))
    expect(fn(pln(4))).toEqual(pls('a'))
    expect(fn(pln(5))).toEqual(pls('az'))
    expect(fn(pln(6))).toEqual(pls('a'))
    expect(fn(pln(7))).toEqual(pls('a'))
    expect(fn(pln(8))).toEqual(pls('a'))
    expect(fn(pln(9))).toEqual(pls('a'))
    expect(fn(pln(10))).toEqual(pls('a'))
  })

  test('dativus', () => {
    const fn = langUtils['dativus']
    expect(fn(pln(-5))).toEqual(pls('öt'))
    expect(fn(pln(-1))).toEqual(pls('et'))
    expect(fn(pln(0))).toEqual(pls('t'))
    expect(fn(pln(1))).toEqual(pls('et'))
    expect(fn(pln(2))).toEqual(pls('t'))
    expect(fn(pln(3))).toEqual(pls('at'))
    expect(fn(pln(4))).toEqual(pls('et'))
    expect(fn(pln(5))).toEqual(pls('öt'))
    expect(fn(pln(6))).toEqual(pls('ot'))
    expect(fn(pln(7))).toEqual(pls('et'))
    expect(fn(pln(8))).toEqual(pls('at'))
    expect(fn(pln(9))).toEqual(pls('et'))
    expect(fn(pln(10))).toEqual(pls('et'))
    expect(fn(pln(15))).toEqual(pls('öt'))
    expect(fn(pln(20))).toEqual(pls('at'))
    expect(fn(pln(30))).toEqual(pls('at'))
    expect(fn(pln(40))).toEqual(pls('et'))
    expect(fn(pln(50))).toEqual(pls('et'))
    expect(fn(pln(60))).toEqual(pls('at'))
    expect(fn(pln(70))).toEqual(pls('et'))
    expect(fn(pln(80))).toEqual(pls('at'))
    expect(fn(pln(90))).toEqual(pls('et'))
    expect(fn(pln(100))).toEqual(pls('at'))
    expect(fn(pln(1000))).toEqual(pls('et'))
    expect(fn(pln(1234))).toEqual(pls('et'))
    expect(fn(pln(1_000_000_000))).toEqual(pls('ot'))
  })

  test('num-to-text', () => {
    const fn = langUtils['num-to-text']
    expect(fn(pln(0))).toEqual(pls('nulla'))
    expect(fn(pln(2))).toEqual(pls('kettő'))
    expect(fn(pln(-5))).toEqual(pls('mínusz öt'))
    expect(fn(pln(123))).toEqual(pls('százhuszonhárom'))
    expect(fn(pln(201))).toEqual(pls('kétszázegy'))
    expect(fn(pln(1023))).toEqual(pls('ezerhuszonhárom'))
    expect(fn(pln(2001))).toEqual(pls('kétezer-egy'))
    expect(fn(pln(200001))).toEqual(pls('kétszázezer-egy'))
    expect(fn(pln(102_789))).toEqual(pls('százkétezer-hétszáznyolcvankilenc'))
    expect(fn(pln(402_789))).toEqual(pls('négyszázkétezer-hétszáznyolcvankilenc'))
    expect(fn(pln(1_402_789))).toEqual(pls('egymillió-négyszázkétezer-hétszáznyolcvankilenc'))
    expect(fn(pln(111_402_789))).toEqual(
      pls('száztizenegymillió-négyszázkétezer-hétszáznyolcvankilenc'),
    )
    expect(fn(pln(1_500_402_789))).toEqual(
      pls('egymilliárd-ötszázmillió-négyszázkétezer-hétszáznyolcvankilenc'),
    )
    expect(fn(pln(98_000_000_001))).toEqual(pls('kilencvennyolcmilliárd-egy'))
  })

  test('suffix-times', () => {
    const fn = langUtils['suffix-times']
    expect(fn(pln(-5))).toEqual(pls('ször'))
    expect(fn(pln(-1))).toEqual(pls('szer'))
    expect(fn(pln(0))).toEqual(pls('szor'))
    expect(fn(pln(1))).toEqual(pls('szer'))
    expect(fn(pln(2))).toEqual(pls('szer'))
    expect(fn(pln(3))).toEqual(pls('szor'))
    expect(fn(pln(4))).toEqual(pls('szer'))
    expect(fn(pln(5))).toEqual(pls('ször'))
    expect(fn(pln(6))).toEqual(pls('szor'))
    expect(fn(pln(7))).toEqual(pls('szer'))
    expect(fn(pln(8))).toEqual(pls('szor'))
    expect(fn(pln(9))).toEqual(pls('szer'))
    expect(fn(pln(10))).toEqual(pls('szer'))
    expect(fn(pln(15))).toEqual(pls('ször'))
    expect(fn(pln(20))).toEqual(pls('szor'))
    expect(fn(pln(30))).toEqual(pls('szor'))
    expect(fn(pln(40))).toEqual(pls('szer'))
    expect(fn(pln(50))).toEqual(pls('szer'))
    expect(fn(pln(60))).toEqual(pls('szor'))
    expect(fn(pln(70))).toEqual(pls('szer'))
    expect(fn(pln(80))).toEqual(pls('szor'))
    expect(fn(pln(90))).toEqual(pls('szer'))
    expect(fn(pln(100))).toEqual(pls('szor'))
    expect(fn(pln(1000))).toEqual(pls('szer'))
    expect(fn(pln(1234))).toEqual(pls('szer'))
  })

  test('suffix-times2', () => {
    const fn = langUtils['suffix-times2']
    expect(fn(pln(-5))).toEqual(pls('szörösére'))
    expect(fn(pln(-1))).toEqual(pls('szeresére'))
    expect(fn(pln(0))).toEqual(pls('szorosára'))
    expect(fn(pln(1))).toEqual(pls('szeresére'))
    expect(fn(pln(2))).toEqual(pls('szeresére'))
    expect(fn(pln(3))).toEqual(pls('szorosára'))
    expect(fn(pln(4))).toEqual(pls('szeresére'))
    expect(fn(pln(5))).toEqual(pls('szörösére'))
    expect(fn(pln(6))).toEqual(pls('szorosára'))
    expect(fn(pln(7))).toEqual(pls('szeresére'))
    expect(fn(pln(8))).toEqual(pls('szorosára'))
    expect(fn(pln(9))).toEqual(pls('szeresére'))
    expect(fn(pln(10))).toEqual(pls('szeresére'))
    expect(fn(pln(15))).toEqual(pls('szörösére'))
    expect(fn(pln(20))).toEqual(pls('szorosára'))
    expect(fn(pln(30))).toEqual(pls('szorosára'))
    expect(fn(pln(40))).toEqual(pls('szeresére'))
    expect(fn(pln(50))).toEqual(pls('szeresére'))
    expect(fn(pln(60))).toEqual(pls('szorosára'))
    expect(fn(pln(70))).toEqual(pls('szeresére'))
    expect(fn(pln(80))).toEqual(pls('szorosára'))
    expect(fn(pln(90))).toEqual(pls('szeresére'))
    expect(fn(pln(100))).toEqual(pls('szorosára'))
    expect(fn(pln(1000))).toEqual(pls('szeresére'))
    expect(fn(pln(1234))).toEqual(pls('szeresére'))
  })

  test('suffix-fraction', () => {
    const fn = langUtils['suffix']
    expect(fn(plf(1, -5))).toEqual(pls('öd'))
    expect(fn(plf(1, -1))).toEqual(pls('ed'))
    expect(fn(plf(1, 1))).toEqual(pls('ed'))
    expect(fn(plf(1, 2))).toEqual(pls('ed'))
    expect(fn(plf(1, 3))).toEqual(pls('ad'))
    expect(fn(plf(1, 4))).toEqual(pls('ed'))
    expect(fn(plf(1, 5))).toEqual(pls('öd'))
    expect(fn(plf(1, 6))).toEqual(pls('od'))
    expect(fn(plf(1, 7))).toEqual(pls('ed'))
    expect(fn(plf(1, 8))).toEqual(pls('ad'))
    expect(fn(plf(1, 9))).toEqual(pls('ed'))
    expect(fn(plf(1, 10))).toEqual(pls('ed'))
    expect(fn(plf(1, 15))).toEqual(pls('öd'))
    expect(fn(plf(1, 20))).toEqual(pls('ad'))
    expect(fn(plf(1, 30))).toEqual(pls('ad'))
    expect(fn(plf(1, 40))).toEqual(pls('ed'))
    expect(fn(plf(1, 50))).toEqual(pls('ed'))
    expect(fn(plf(1, 60))).toEqual(pls('ad'))
    expect(fn(plf(1, 70))).toEqual(pls('ed'))
    expect(fn(plf(1, 80))).toEqual(pls('ad'))
    expect(fn(plf(1, 90))).toEqual(pls('ed'))
    expect(fn(plf(1, 100))).toEqual(pls('ad'))
    expect(fn(plf(1, 1000))).toEqual(pls('ed'))
    expect(fn(plf(1, 1234))).toEqual(pls('ed'))
  })
})
