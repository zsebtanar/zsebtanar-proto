import { langUtils } from './langUtils'
import { plFractionNumber, plNumber, plString } from 'pocket-lisp-stdlib'

describe('lang utils', () => {
  test('suffix-times', () => {
    const fn = langUtils['suffix-times']
    expect(fn(plNumber(-5))).toEqual(plString('ször'))
    expect(fn(plNumber(-1))).toEqual(plString('szer'))
    expect(fn(plNumber(0))).toEqual(plString('szor'))
    expect(fn(plNumber(1))).toEqual(plString('szer'))
    expect(fn(plNumber(2))).toEqual(plString('szer'))
    expect(fn(plNumber(3))).toEqual(plString('szor'))
    expect(fn(plNumber(4))).toEqual(plString('szer'))
    expect(fn(plNumber(5))).toEqual(plString('ször'))
    expect(fn(plNumber(6))).toEqual(plString('szor'))
    expect(fn(plNumber(7))).toEqual(plString('szer'))
    expect(fn(plNumber(8))).toEqual(plString('szor'))
    expect(fn(plNumber(9))).toEqual(plString('szer'))
    expect(fn(plNumber(10))).toEqual(plString('szer'))
    expect(fn(plNumber(15))).toEqual(plString('ször'))
    expect(fn(plNumber(20))).toEqual(plString('szor'))
    expect(fn(plNumber(30))).toEqual(plString('szor'))
    expect(fn(plNumber(40))).toEqual(plString('szer'))
    expect(fn(plNumber(50))).toEqual(plString('szer'))
    expect(fn(plNumber(60))).toEqual(plString('szor'))
    expect(fn(plNumber(70))).toEqual(plString('szer'))
    expect(fn(plNumber(80))).toEqual(plString('szor'))
    expect(fn(plNumber(90))).toEqual(plString('szer'))
    expect(fn(plNumber(100))).toEqual(plString('szor'))
    expect(fn(plNumber(1000))).toEqual(plString('szer'))

    expect(fn(plNumber(1234))).toEqual(plString('szer'))
  })

  test('lang-hu-times2', () => {
    const fn = langUtils['suffix-times2']
    expect(fn(plNumber(-5))).toEqual(plString('szörösére'))
    expect(fn(plNumber(-1))).toEqual(plString('szeresére'))
    expect(fn(plNumber(0))).toEqual(plString('szorosára'))
    expect(fn(plNumber(1))).toEqual(plString('szeresére'))
    expect(fn(plNumber(2))).toEqual(plString('szeresére'))
    expect(fn(plNumber(3))).toEqual(plString('szorosára'))
    expect(fn(plNumber(4))).toEqual(plString('szeresére'))
    expect(fn(plNumber(5))).toEqual(plString('szörösére'))
    expect(fn(plNumber(6))).toEqual(plString('szorosára'))
    expect(fn(plNumber(7))).toEqual(plString('szeresére'))
    expect(fn(plNumber(8))).toEqual(plString('szorosára'))
    expect(fn(plNumber(9))).toEqual(plString('szeresére'))
    expect(fn(plNumber(10))).toEqual(plString('szeresére'))
    expect(fn(plNumber(15))).toEqual(plString('szörösére'))
    expect(fn(plNumber(20))).toEqual(plString('szorosára'))
    expect(fn(plNumber(30))).toEqual(plString('szorosára'))
    expect(fn(plNumber(40))).toEqual(plString('szeresére'))
    expect(fn(plNumber(50))).toEqual(plString('szeresére'))
    expect(fn(plNumber(60))).toEqual(plString('szorosára'))
    expect(fn(plNumber(70))).toEqual(plString('szeresére'))
    expect(fn(plNumber(80))).toEqual(plString('szorosára'))
    expect(fn(plNumber(90))).toEqual(plString('szeresére'))
    expect(fn(plNumber(100))).toEqual(plString('szorosára'))
    expect(fn(plNumber(1000))).toEqual(plString('szeresére'))

    expect(fn(plNumber(1234))).toEqual(plString('szeresére'))
  })

  test('suffix-fraction', () => {
    const fn = langUtils['suffix']
    expect(fn(plFractionNumber(1, -5))).toEqual(plString('öd'))
    expect(fn(plFractionNumber(1, -1))).toEqual(plString('ed'))

    expect(fn(plFractionNumber(1, 1))).toEqual(plString('ed'))
    expect(fn(plFractionNumber(1, 2))).toEqual(plString('ed'))
    expect(fn(plFractionNumber(1, 3))).toEqual(plString('ad'))
    expect(fn(plFractionNumber(1, 4))).toEqual(plString('ed'))
    expect(fn(plFractionNumber(1, 5))).toEqual(plString('öd'))
    expect(fn(plFractionNumber(1, 6))).toEqual(plString('od'))
    expect(fn(plFractionNumber(1, 7))).toEqual(plString('ed'))
    expect(fn(plFractionNumber(1, 8))).toEqual(plString('ad'))
    expect(fn(plFractionNumber(1, 9))).toEqual(plString('ed'))
    expect(fn(plFractionNumber(1, 10))).toEqual(plString('ed'))
    expect(fn(plFractionNumber(1, 15))).toEqual(plString('öd'))
    expect(fn(plFractionNumber(1, 20))).toEqual(plString('ad'))
    expect(fn(plFractionNumber(1, 30))).toEqual(plString('ad'))
    expect(fn(plFractionNumber(1, 40))).toEqual(plString('ed'))
    expect(fn(plFractionNumber(1, 50))).toEqual(plString('ed'))
    expect(fn(plFractionNumber(1, 60))).toEqual(plString('ad'))
    expect(fn(plFractionNumber(1, 70))).toEqual(plString('ed'))
    expect(fn(plFractionNumber(1, 80))).toEqual(plString('ad'))
    expect(fn(plFractionNumber(1, 90))).toEqual(plString('ed'))
    expect(fn(plFractionNumber(1, 100))).toEqual(plString('ad'))
    expect(fn(plFractionNumber(1, 1000))).toEqual(plString('ed'))

    expect(fn(plFractionNumber(1, 1234))).toEqual(plString('ed'))
  })

  test('dativus', () => {
    const fn = langUtils['dativus']
    expect(fn(plNumber(-5))).toEqual(plString('öt'))
    expect(fn(plNumber(-1))).toEqual(plString('et'))
    expect(fn(plNumber(0))).toEqual(plString('t'))
    expect(fn(plNumber(1))).toEqual(plString('et'))
    expect(fn(plNumber(2))).toEqual(plString('t'))
    expect(fn(plNumber(3))).toEqual(plString('at'))
    expect(fn(plNumber(4))).toEqual(plString('et'))
    expect(fn(plNumber(5))).toEqual(plString('öt'))
    expect(fn(plNumber(6))).toEqual(plString('ot'))
    expect(fn(plNumber(7))).toEqual(plString('et'))
    expect(fn(plNumber(8))).toEqual(plString('at'))
    expect(fn(plNumber(9))).toEqual(plString('et'))
    expect(fn(plNumber(10))).toEqual(plString('et'))
    expect(fn(plNumber(15))).toEqual(plString('öt'))
    expect(fn(plNumber(20))).toEqual(plString('at'))
    expect(fn(plNumber(30))).toEqual(plString('at'))
    expect(fn(plNumber(40))).toEqual(plString('et'))
    expect(fn(plNumber(50))).toEqual(plString('et'))
    expect(fn(plNumber(60))).toEqual(plString('at'))
    expect(fn(plNumber(70))).toEqual(plString('et'))
    expect(fn(plNumber(80))).toEqual(plString('at'))
    expect(fn(plNumber(90))).toEqual(plString('et'))
    expect(fn(plNumber(100))).toEqual(plString('at'))
    expect(fn(plNumber(1000))).toEqual(plString('et'))

    expect(fn(plNumber(1234))).toEqual(plString('et'))
    expect(fn(plNumber(1_000_000_000))).toEqual(plString('ot'))
  })

  test('article', () => {
    const fn = langUtils['article']
    expect(fn(plNumber(-5))).toEqual(plString('a'))
    expect(fn(plNumber(0))).toEqual(plString('a'))
    expect(fn(plNumber(1))).toEqual(plString('az'))
    expect(fn(plNumber(2))).toEqual(plString('a'))
    expect(fn(plNumber(3))).toEqual(plString('a'))
    expect(fn(plNumber(4))).toEqual(plString('a'))
    expect(fn(plNumber(5))).toEqual(plString('az'))
    expect(fn(plNumber(6))).toEqual(plString('a'))
    expect(fn(plNumber(7))).toEqual(plString('a'))
    expect(fn(plNumber(8))).toEqual(plString('a'))
    expect(fn(plNumber(9))).toEqual(plString('a'))
    expect(fn(plNumber(10))).toEqual(plString('a'))
  })
})
